extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")

  script
    var grid;
    var names = [];
    
    function ipTypeChanged() {
      var ipEditEnabled;
      if (document.getElementById("ipType").value == "DHCP") {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }
      document.getElementById("ip1").disabled = ipEditEnabled;
      document.getElementById("ip2").disabled = ipEditEnabled;
      document.getElementById("ip3").disabled = ipEditEnabled;
      document.getElementById("ip4").disabled = ipEditEnabled;
     }
    
    function deleteSelectedItems() {
      // This still isn't working properly, but I wanted to revert it to
      // it's last point nonetheless. I have a question posted in stack overflow
      // about it, if that doesn't bear any fruit than we may have to 
      // move away from a DataGrid and try something else.
      var items = grid.selection.getSelected();
      
      dojo.forEach(items, function(selectedItem) {
        names.push(grid.store.getValues(selectedItem, "Name"));
      });
     
      now.deleteNodes(names, errorMessageCallback);
    }

    function errorMessageCallback(success, message) {
      if(success != true) {
        alert("Unable to complete operation due to error: " + message);
      }
      location.reload(true);
    }

    function checkOnlyOne(checkedBox)
    {
      var forLength = document.getElementById("length").getAttribute("value");
      
      var checkAgainst = checkedBox.getAttribute("id");
      
      var checkedInterface = checkedBox.value;
      var ip = now.GetLocalIP(checkedInterface, UpdateIpField);
      
      if(forLength == 1)
      {
        checkedBox.checked = true;
        return;
      }
      
      for(var i = 0; i < forLength; i++)
      {
        if(checkAgainst !== ("if" + i))
        {
          document.getElementById("if" + i).checked = false;
        }
      }
      
      if(!checkedBox.checked)
      {
        checkedBox.checked = true; 
      }
    }

    function UpdateIpField(ip) {
      if (ip != undefined) {
        var ipParts = ip.split(".");
        document.getElementById("ip1").value = ipParts[0];
        document.getElementById("ip2").value = ipParts[1];
        document.getElementById("ip3").value = ipParts[2];
        document.getElementById("ip4").value = ipParts[3];
      } else {
        document.getElementById("ip1").value = 0;
        document.getElementById("ip2").value = 0;
        document.getElementById("ip3").value = 0;
        document.getElementById("ip4").value = 0;
      }

    }

    function editSelectedItem() {
      var items = grid.selection.getSelected();
      if (items.length != 1)
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "Please select only 1 node for editing"});
        dialog.show();
        return;
      }

      var nodeName = grid.store.getValues(items[0], "Name");

      if (nodeName == "Doppelganger") 
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "The Doppelganger node can not be edited here"});
        dialog.show();
        return; 
      }
      window.location.href = "editHoneydNode?node=" + nodeName;
    }

    require(["dojox/grid/DataGrid","dojo/data/ObjectStore","dojo/domReady!", "dojox/data/HtmlStore", "dijit/Dialog"],

    function(DataGrid,ObjectStore){
        var gridStore = new dojox.data.HtmlStore({dataId:"nodeTable"});
        grid = new dojox.grid.DataGrid({store:gridStore,structure:'layoutNodes',query:{},rowsPerPage:100, autoWidth:true});
        /*dojo.connect(grid, "onSelected", grid, function(idx){
          names.length = 0;
          if(!grid.store.isItemLoaded(grid.getItem(idx)))
          {
            console.log("Found unloaded item");
            grid.store.loadItem(grid.getItem(idx));
          }
          names.push(grid.store.getValues(grid.getItem(idx), "Name"));
          console.log("after select: " + names);
        });*/
        dojo.byId("gridDiv").appendChild(grid.domNode);
      now.ready(function() {
        checkOnlyOne(if0);
      });
    });

  script(type="text/javascript")
    /*set up data store*/
    var layoutNodes = [[
      { field: "Enabled", name: "Enabled", width: '100px' },
      { field: "Name", name: "Name", width: '400px' },
      { field: "Profile", name: "Profile", width: '100px' },
      { field: "IP", name: "IP", width: '150px' },
      { field: "MAC", name: "MAC", width: '150px' },
    ]];

block content
  h1 Current Honeyd Nodes
  br
  form(id="groupChangeSelect", method="post", action="/changeGroup")
    label Group
      select(name="GROUP", id="GROUP", onchange="document.getElementById(\"groupChangeSelect\").submit();")
        each g, i in groups
          if g == currentGroup
            option(SELECTED) #{g}
          else
            option #{g}
  br
  table#nodeTable(style="display: none")
    thead
      tr
        th Enabled
        th Name
        th Profile
        th IP
        th MAC
    tbody
      each node, i in nodes
        tr
          td #{node.IsEnabled()}
          td #{node.GetName()}
          td #{node.GetProfile()}
          td #{node.GetIP()}
          td #{node.GetMAC()}
 
  div(style="height: 250px;")
    div#gridDiv(style="height: 250px")
 

  button(onClick="deleteSelectedItems()") Delete Selected Nodes 
  button(onClick="editSelectedItem()") Edit Selected Node

  br
  br
  form(method="post", action="/editHoneydNodesSave")
    h2 Create Honeyd Nodes
    label Profile
    select(name="profile")
      each profile, i in profiles
        option #{profile}
    br

    label Number of nodes to create
    input(type="number", name="nodeCount", min="1", value="1")
    
    br
    label Network Interface
    table
      thead
        tr 
          th Interfaces
      tbody
      - if(INTERFACES.length == 1)
        tr 
          td
            input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne(if0)")
            #{INTERFACES[0]}
      - else
        tr 
          td
            input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne(if0)")
            #{INTERFACES[0]}
        - for (var i = 1; i < INTERFACES.length; i++)
            tr 
              td
                input(type="checkbox", value=INTERFACES[i], id="if#{i}", name="interface", width=10, onclick="checkOnlyOne(if#{i})")
                #{INTERFACES[i]}
    hidden(id="length", value=INTERFACES.length)
    br
    label IP Address Range Type
    select#ipType(name="ipType", onChange="ipTypeChanged()")
      option DHCP
      option IP Range

    br
    label Starting IP address
    input.ip#ip1(type="number", name="ip1", min="0", max="255", value="0", disabled="disabled")
    input.ip#ip2(type="number", name="ip2", min="0", max="255", value="0", disabled="disabled")
    input.ip#ip3(type="number", name="ip3", min="0", max="255", value="0", disabled="disabled")
    input.ip#ip4(type="number", name="ip4", min="0", max="255", value="0", disabled="disabled")
   
    br
    br
    input(type="Submit",value="Create New Nodes")
