extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")

  script
    var grid;
    
    function ipTypeChanged() {
      var ipEditEnabled;
      if (document.getElementById("ipType").value == "DHCP") {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }
      document.getElementById("ip1").disabled = ipEditEnabled;
      document.getElementById("ip2").disabled = ipEditEnabled;
      document.getElementById("ip3").disabled = ipEditEnabled;
      document.getElementById("ip4").disabled = ipEditEnabled;
     }
    
    function deleteSelectedItems() {
      var items = grid.selection.getSelected();
      var names = [];
      dojo.forEach(items, function(selectedItem) {
        names.push(grid.store.getValues(selectedItem, "Name")); 
      });
      
      now.deleteProfiles(names, errorMessageCallback);
    }

    
    function errorMessageCallback(sucess, message) {
      if(sucess != true) {
        var dialog = new dijit.Dialog({title: "Error", content: "Unable to complete operation due to error: " + message});
        dialog.show();
        return;
      }
      location.reload(true);
    }

    function editSelectedItem() {
      var items = grid.selection.getSelected();
      if (items.length != 1)
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "Please select only 1 profile for editing"});
        dialog.show();
        return;
      }
      window.location.href = "editHoneydProfile?profile=" + grid.store.getValues(items[0], "Name");
    }

    function addChildSelectedItem() {
      var items = grid.selection.getSelected();
      if (items.length != 1)
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "Please select only 1 profile for parenting"});
        dialog.show();
        return;
      }
      window.location.href = "addHoneydProfile?parent=" + grid.store.getValues(items[0], "Name");
    }


    require(["dojox/grid/DataGrid","dojo/data/ObjectStore","dojo/domReady!", "dojox/data/HtmlStore", "dijit/Dialog"],

    function(DataGrid,ObjectStore){
      var gridStore = new dojox.data.HtmlStore({dataId:"profileTable"});
      grid = new dojox.grid.DataGrid({store:gridStore,structure:'layoutProfiles',query:{},rowsPerPage:40, autoWidth:true});
      dojo.byId("gridDiv").appendChild(grid.domNode);
    });
  
  script(type="text/javascript")
          /*set up data store*/
          var layoutProfiles = [[
            { field: "Name", name: "Profile Name", width: '300px' },
            { field: "Parent", name: "Parent Name", width: '200px' },
            { field: "Personality", name: "Operating System Emulation", width: '500px' },
            { field: "Ethernet", name: "Ethernet Vendor Emulation", width: '200px' },
          ]];

block content
  h1 Current Honeyd Profiles
  table#profileTable(style="display: none")
    thead
      tr
        th Name
        th Parent
        th Personality
        th Ethernet
    tbody
      each profile, i in profiles
        tr
          td #{profile.GetName()}
          td #{profile.GetParentProfile()}
          td #{profile.GetPersonality()}
          td #{profile.GetVendors().sort()}
 
  div(style="height: 250px;")
    div#gridDiv(style="height: 250px")
 

  button(onClick="deleteSelectedItems()") Delete Selected Profiles 
  button(onClick="editSelectedItem()") Edit Selected Profile
  button(onClick="addChildSelectedItem()") Add Child Profile
  br
  button(onClick="window.location='/configHoneydNodes';") Configure Haystack Nodes
