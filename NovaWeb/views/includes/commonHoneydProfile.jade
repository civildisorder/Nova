script
        var ethVendorLength = 0;
        var numCreated = 0;
        var loadedName;
        var profile;
        var portList = new function() {};
        var newProfile = "#{newProfile}";

        var currentName;
        if (newProfile == "true") {
                currentName = "#{parentName}";
                loadedName = currentName;
                console.log("Creating child of profile " + currentName);
        } 
        else 
        {
                currentName = "#{oldName}";
                loadedName = currentName;
                console.log("Editing profile " + currentName);
        }

        var inheritanceChanged = function() {};
        var uptimeTypeChanged = function() {};
        var portInheritedChange = function(portUID) {};
        var deletePort = function() {};
        var addPort = function(port) {};
        var portBehaviorChanged = function() {};
        var saveChanges = function() {};
        var savedChanges = function() {};
        var sliderMoved = function(which, len, cb) {};
        var clearCell = function(which, len) {};
        var addVendor = function(vendName) {};
        var deleteAndClean = function(which) {};
        var clearCreated = function() {};

        var portIndexes = [];
        var loaded = false;


        function selectItemByValue(elmnt, value) {
                for(var i=0; i < elmnt.options.length; i++) {
                        if(elmnt.options[i].value == value) {
                        elmnt.selectedIndex = i;
                        }
                }
        }

        require(["dojo/domReady!", "dojo/ready", "dijit/registry", "dijit/form/FilteringSelect"], function() {

                addVendor = function(vendName) {
                if(document.getElementById("ethDiv0") == undefined)
                {        
                        var teed = document.getElementById("labelDist");
                        var teed2 = document.getElementById("ranges");
                        var teed3 = document.getElementById("deleteButtonHere");

                        var div = document.createElement("div");

                        div.setAttribute("id", "ethDiv0");
                        div.setAttribute("style", "width: content_width");

                        var rangeDiv = document.createElement("div");

                        rangeDiv.setAttribute("id", "rangeDiv0");
                        rangeDiv.setAttribute("style", "width: content_width");

                        var distribution = document.createElement("input");

                        distribution.setAttribute("id", "dist0");
                        distribution.setAttribute("type", "range");
                        distribution.setAttribute("min", "1");                    
                        distribution.setAttribute("max", "100");
                        distribution.setAttribute("step", "1");
                        distribution.setAttribute("value", 100);
                        distribution.setAttribute("readonly", "true");
                        distribution.setAttribute("style", "vertical-align: text");
                        distribution.setAttribute("onchange", 'sliderMoved("dist0", 1)');

                        var add = document.createElement("input");

                        add.setAttribute("id", "vend0");
                        add.innerHTML = vendName;
                        add.setAttribute("type", "text");
                        add.setAttribute("value", vendName);
                        add.setAttribute("style", "width: 10");
                        add.setAttribute("readonly", "true");
                        add.setAttribute("style", "display: inline-block; float: left; clear: left");

                        var br = document.createElement("br");

                        var distLabel = document.createElement("input");

                        distLabel.setAttribute("id","distLabel0");
                        distLabel.setAttribute("value", "100%");
                        distLabel.innerHTML = "100%";
                        distLabel.setAttribute("type", "text");
                        distLabel.setAttribute("readonly", "true");
                        distLabel.setAttribute("style","width: 40px; float: right; clear: right");
                        distLabel.setAttribute("onchange", 'clearCell("distLabel0", ' + 1 + ')');

                        var deleteDiv = document.createElement("div");

                        deleteDiv.setAttribute("style", "width: content_width");
                        deleteDiv.setAttribute("id", "deleteDiv0");

                        var deleteButton = document.createElement("button");

                        deleteButton.setAttribute("id", "delete0");
                        deleteButton.setAttribute("type", "button");
                        deleteButton.setAttribute("onclick", "deleteAndClean('ethDiv0')");
                        deleteButton.innerHTML = "Delete Vendor";

                        div.appendChild(add);
                        div.appendChild(distLabel);
                        teed.appendChild(div);
                        rangeDiv.appendChild(distribution);
                        rangeDiv.appendChild(br);
                        teed2.appendChild(rangeDiv);
                        deleteDiv.appendChild(deleteButton);
                        deleteDiv.appendChild(br);
                        teed3.appendChild(deleteDiv);

                        numCreated = 1;
                }
                else
                {
                        var keepGoing = true;

                        for(var i = 0; i < numCreated; i++)
                        {
                                if(vendName == document.getElementById("vend" + i).value)
                                {
                                        keepGoing = false;
                                }
                        }
                        if(keepGoing)
                        {
                                for(var i = 0; i < numCreated; i++)
                                {
                                        document.getElementById("dist" + i).removeAttribute("readonly");
                                        document.getElementById("distLabel" + i).removeAttribute("readonly");
                                }

                                document.getElementById("errorEthernet").value = "";
                                document.getElementById("errorEthernet").innerHTML = "";


                                var number = numCreated;
                                var checkAgainst = "ethDiv" + number;
                                numCreated++;

                                var teed = document.getElementById("labelDist");
                                var teed2 = document.getElementById("ranges");
                                var teed3 = document.getElementById("deleteButtonHere");

                                var div = document.createElement("div");

                                div.setAttribute("id", "ethDiv" + number);
                                div.setAttribute("style", "width: content_width");

                                var rangeDiv = document.createElement("div");

                                rangeDiv.setAttribute("id", "rangeDiv" + number);
                                rangeDiv.setAttribute("style", "width: content_width");

                                var distribution = document.createElement("input");

                                distribution.setAttribute("id", "dist" + number);
                                distribution.setAttribute("type", "range");
                                distribution.setAttribute("min", "1");                    
                                distribution.setAttribute("max", 100 - number);
                                distribution.setAttribute("step", "1");
                                distribution.setAttribute("value", 1);
                                distribution.setAttribute("style", "vertical-align: text");
                                distribution.setAttribute("onchange", 'sliderMoved(\"dist' + number + '\", ' + (number + 1) + ')');

                                var add = document.createElement("input");

                                add.setAttribute("id", "vend" + number);
                                add.innerHTML = vendName;
                                add.setAttribute("type", "text");
                                add.setAttribute("value", vendName);
                                add.setAttribute("style", "width: 10");
                                add.setAttribute("readonly", "true");
                                add.setAttribute("style", "display: inline-block; float: left; clear: left");

                                var br = document.createElement("br");

                                var distLabel = document.createElement("input");

                                distLabel.setAttribute("id","distLabel" + number);
                                distLabel.setAttribute("value", "1%");
                                distLabel.innerHTML = "1%";
                                distLabel.setAttribute("type", "text");
                                distLabel.setAttribute("style","width: 40px; float: right; clear: right");
                                distLabel.setAttribute("onchange", 'clearCell("distLabel' + number + '", ' + (number + 1) + ')');

                                var deleteDiv = document.createElement("div");

                                deleteDiv.setAttribute("style", "width: content_width");
                                deleteDiv.setAttribute("id", "deleteDiv" + number);
                                var deleteButton = document.createElement("button");

                                deleteButton.setAttribute("id", "delete" + number);
                                deleteButton.setAttribute("type", "button");
                                deleteButton.setAttribute("onclick", 'deleteAndClean("ethDiv' + number + '")');
                                deleteButton.innerHTML = "Delete Vendor";

                                div.appendChild(add);
                                div.appendChild(distLabel);
                                teed.appendChild(div);
                                rangeDiv.appendChild(distribution);
                                rangeDiv.appendChild(br);
                                teed2.appendChild(rangeDiv);
                                deleteDiv.appendChild(deleteButton);
                                deleteDiv.appendChild(br);
                                teed3.appendChild(deleteDiv);

                                var deleteOne = true;

                                for(var i = 0; i < (number + 1); i++)
                                {
                                        if("ethDiv" + i !== checkAgainst)
                                        {
                                                var change = document.getElementById("ethDiv" + i);
                                                var changeMax = document.getElementById("rangeDiv" + i);

                                                for(var j = 0; j < change.childNodes.length; j++)
                                                {
                                                        if(change.childNodes[j].id.substr(0, 9) == "distLabel")
                                                        {
                                                                if(((change.childNodes[j].value - 1) != 0) && (deleteOne))
                                                                {
                                                                        var replace = ((parseInt(change.childNodes[j].value.substr(0, change.childNodes[j].value.length - 1)) - 1).toString() + "%");

                                                                        change.childNodes[j].value = replace;
                                                                        change.childNodes[j].innerHTML = replace;

                                                                        document.getElementById("dist" + i).setAttribute("value", document.getElementById("dist" + i).value - 1);
                                                                        deleteOne = false;
                                                                        //need to modify or obviate the hidden field for user created vendors
                                                                        }
                                                                }
                                                        }
                                                }

                                                document.getElementById("dist" + i).setAttribute("onchange", 'sliderMoved(\"dist' + i + '\", ' + (number + 1) + ')');
                                                document.getElementById("dist" + i).setAttribute("max", (100 - number));
                                                document.getElementById("distLabel" + i).setAttribute("onchange", 'clearCell("distLabel' + i + '", ' + (number + 1) + ')');
                                        }
                                }
                                else
                                {
                                        document.getElementById("errorEthernet").value = "Can't add the same vendor twice";
                                        document.getElementById("errorEthernet").innerHTML = "Can't add the same vendor twice";
                                }
                        }
                }

                deleteAndClean = function(which) {
                        if(numCreated == 1)
                        {
                                document.getElementById("errorEthernet").value = "Can't delete last vendor, must have at least one";
                                document.getElementById("errorEthernet").innerHTML = "Can't delete last vendor, must have at least one";
                                return;
                        }

                        var whichToDelete = which.substr(6);

                        // need to go through and delete the divs with whichToDelete as their last character;
                        // then, need to go to each element after the deleted one, decrement their ids, as well
                        // as modify their function calls and stuff to reflect the changed number of vendors
                        var teed = document.getElementById("labelDist");
                        var teed2 = document.getElementById("ranges");
                        var teed3 = document.getElementById("deleteButtonHere");

                        var keepGoing = true;

                        for(var i = 0; i < teed.childNodes.length && keepGoing; i++)
                        {
                                if(teed.childNodes[i].id == ("ethDiv" + whichToDelete))
                                {
                                        teed.removeChild(teed.childNodes[i]);
                                        keepGoing = false;
                                }
                        }

                        keepGoing = true;

                        for(var i = 0; i < teed2.childNodes.length && keepGoing; i++)
                        {
                                if(teed2.childNodes[i].id == ("rangeDiv" + whichToDelete))
                                {
                                        teed2.removeChild(teed2.childNodes[i]);
                                        keepGoing = false;
                                }
                        }

                        keepGoing = true;

                        for(var i = 0; i < teed3.childNodes.length && keepGoing; i++)
                        {
                                if(teed3.childNodes[i].id == ("deleteDiv" + whichToDelete))
                                {
                                        teed3.removeChild(teed3.childNodes[i]);
                                        keepGoing = false;
                                }
                        }


                        var newNumCreated = numCreated - 1;

                        for(var i = 0; i < numCreated; i++)
                        {
                                if(i >= (parseInt(whichToDelete) + 1))
                                {
                                        document.getElementById("ethDiv" + i).id = ("ethDiv" + (i - 1));
                                        document.getElementById("vend" + i).id = ("vend" + (i - 1));
                                        document.getElementById("distLabel" + i).setAttribute("onchange", 'clearCell(\"distLabel' + (i - 1) + '\", ' + newNumCreated + ')');
                                        document.getElementById("distLabel" + i).id = ("distLabel" + (i - 1));
                                        document.getElementById("rangeDiv" + i).id = ("rangeDiv" + (i - 1));
                                        document.getElementById("dist" + i).setAttribute("onchange", 'sliderMoved(\"dist' + (i - 1) + '\", ' + newNumCreated + ')');
                                        document.getElementById("dist" + i).id = ("dist" + (i - 1));
                                        document.getElementById("delete" + i).setAttribute("onclick", 'deleteAndClean(\"ethDiv' + (i - 1) + '\")');
                                        document.getElementById("delete" + i).id = ("delete" + (i - 1));
                                        document.getElementById("deleteDiv" + i).id = ("deleteDiv" + (i - 1));
                                }
                                else if(i < parseInt(whichToDelete))
                                {
                                        document.getElementById("distLabel" + i).setAttribute("onchange", 'clearCell(\"distLabel' + i + '\", ' + newNumCreated + ')');
                                        document.getElementById("dist" + i).setAttribute("onchange", 'sliderMoved(\"dist' + i + '\", ' + newNumCreated + ')');
                                }
                        }

                        var max = {index: 0, value: dojo.byId("dist0").value};
                        var justInCase = {index: 0, value: dojo.byId("dist0").value};

                        for(var i = 0; i < newNumCreated; i++)
                        {
                                if(dojo.byId("dist" + i).value > max)
                                {
                                        justInCase.index = max.index;
                                        justInCase.value = max.value;
                                        max.index = i;
                                        max.value = checkSum[i];
                                }
                        }

                        if((max.value + 1) < 100)
                        {
                                max.value = parseInt(max.value) + 1;
                                document.getElementById("dist" + max.index).value = max.value;
                                document.getElementById("dist" + max.index).max = parseInt(document.getElementById("dist" + max.index).max) + 1;
                                document.getElementById("distLabel" + max.index).value = max.value.toString() + "%";
                                document.getElementById("distLabel" + max.index).innerHTML = max.value.toString() + "%";
                        }
                        else
                        {
                                justInCase.value = parseInt(justInCase.value) + 1;
                                document.getElementById("dist" + justInCase.index).value = justInCase.value;
                                document.getElementById("dist" + justInCase.index).max = parseInt(document.getElementById("dist" + justInCase.index).max) + 1;
                                document.getElementById("distLabel" + justInCase.index).value = justInCase.value.toString() + "%";
                                document.getElementById("distLabel" + justInCase.index).innerHTML = justInCase.value.toString() + "%";
                        }

                        numCreated = newNumCreated;

                        if(numCreated == 1)
                        {
                                document.getElementById("dist0").value = 100;
                                document.getElementById("dist0").max = 100;
                                document.getElementById("distLabel0").value = "100%";
                                document.getElementById("distLabel0").innerHTML = "100%";

                                document.getElementById("distLabel0").setAttribute("readonly","true");
                                document.getElementById("dist0").setAttribute("readonly", "true");
                        }
                }

                clearCell = function(which, len) {
                        var element = document.getElementById(which);
                        var text = element.value;
                        var maxAllowed = parseInt(document.getElementById("dist" + which[which.length - 1]).getAttribute("max"));
                        var numericValue = (text[text.length - 1] == "%" ? parseInt(text.substr(0, text.length - 1)) : parseInt(text));

                        if(numericValue == 0)
                        {
                                document.getElementById("errorEthernet").value = "Cannot have 0% distribution for a vendor";
                                document.getElementById("errorEthernet").innerHTML = "Cannot have 0% distribution for a vendor";

                                var stringToReplace = (document.getElementById("dist" + which[which.length - 1]).value).toString() + "%";

                                element.value = (document.getElementById("dist" + which[which.length - 1]).value).toString() + "%";
                        }
                        else if(numericValue < 1 || numericValue > maxAllowed)
                        {
                                document.getElementById("errorEthernet").value = "Invalid value for distribution, must be an integer between 1 and " + maxAllowed;
                                document.getElementById("errorEthernet").innerHTML = "Invalid value for distribution, must be an integer between 1 and " + maxAllowed;

                                var stringToReplace = (document.getElementById("dist" + which[which.length - 1]).value).toString() + "%";

                                element.value = (document.getElementById("dist" + which[which.length - 1]).value).toString() + "%";
                        }
                        else
                        {
                                document.getElementById("errorEthernet").value = "";
                                document.getElementById("errorEthernet").innerHTML = "";

                                if(text[text.length - 1] != "%")
                                {
                                        element.value += "%";

                                        sliderMoved("dist" + which[which.length - 1], len, text);
                                }
                                else if(document.getElementById("dist" + which[which.length - 1]).value != document.getElementById(which).value)
                                {
                                        sliderMoved("dist" + which[which.length - 1], len, text);
                                }
                        }
                }

                sliderMoved = function(which, len, cb) {
                        if(cb != undefined)
                        {
                                dojo.byId(which).value = cb;
                        }

                        var changeArray = [];

                        var checkAgainst = which[which.length - 1];

                        for(var i = 0; i < len; i++)
                        {
                                changeArray.push(parseInt(document.getElementById("dist" + i).value));
                        }

                        var total = 0;

                        for(var i in changeArray)
                        {
                                total += parseInt(changeArray[i]);
                        }

                        var reduction = 100 - total;

                        var sumOfOtherElements = parseInt(total - changeArray[checkAgainst]);

                        var modifiers = [];

                        for(var i in changeArray)
                        {
                                if(i != checkAgainst)
                                {
                                        var mult = parseFloat(changeArray[i] / sumOfOtherElements);
                                        modifiers.push(parseFloat(reduction * mult));
                                }
                        }

                        var max = 0;

                        for(var i = 0; i < modifiers.length - 1; i++)
                        {
                                var roundingVal = modifiers[i] + 0.5;

                                if(Math.floor(roundingVal) == Math.floor(modifiers[i]))
                                {
                                        modifiers[i] = Math.floor(roundingVal);
                                        modifiers[i + 1] += parseFloat(roundingVal % 1);
                                }
                                else
                                {
                                        modifiers[i] = Math.floor(roundingVal);
                                        modifiers[i + 1] -= roundingVal % 1;
                                }

                                max += (modifiers[i] / 1);
                        }

                        modifiers[modifiers.length - 1] = (reduction - max);

                        var j = 0;

                        for(var i in changeArray)
                        {
                                if((i != checkAgainst) && (changeArray[i] + modifiers[j] > 0))
                                {
                                        changeArray[i] += modifiers[j];
                                        j++;
                                }
                                else if((i != checkAgainst) && !(changeArray[i] + modifiers[j] > 0))
                                {
                                        var ltOrEqZero = parseInt(changeArray[i] + modifiers[j]);

                                        while(ltOrEqZero <= 0)
                                        {
                                                modifiers[j] += 1;
                                                modifiers[j + 1] -= 1;
                                                ltOrEqZero = parseInt(changeArray[i] + modifiers[j]);
                                        }

                                        changeArray[i] += modifiers[j];

                                        j++;
                                }
                        }

                        var checkSum = 0;

                        for(var i in changeArray)
                        {
                                checkSum += parseInt(changeArray[i]);
                        }

                        for(var i in changeArray)
                        {
                                var dist = document.getElementById("dist" + i);
                                var distLabel = document.getElementById("distLabel" + i);

                                dist.value = changeArray[i];
                                distLabel.value = changeArray[i].toString() + "%";
                                distLabel.innerHTML = changeArray[i].toString() + "%";
                        }

                        if(numCreated == 1)
                        {
                                document.getElementById("dist0").value = 100;
                                document.getElementById("dist0").max = 100;
                                document.getElementById("distLabel0").value = "100%";
                                document.getElementById("distLabel0").innerHTML = "100%";
                                document.getElementById("distLabel0").setAttribute("readonly","true");
                                document.getElementById("dist0").setAttribute("readonly", "true");
                        }
                }

                function obj() {};
                saveChanges = function() {
                        var pfile = new obj();
                        var ports = new obj();

                        var ethVendorList = [];

                        var checkLength1 = ethVendorLength;
                        var checkLength2 = numCreated;

                        console.log("checkLength1 = " + checkLength1 + " and checklength2 = " + checkLength2);

                        if(checkLength1 == 0 && checkLength2 > 0)
                        {
                          var forLength = checkLength2; 
  
                          for(var i = 0; i < forLength; i++)
                          {
                            var element = {vendor: "", dist: ""};
                            element.vendor = document.getElementById("vend" + i).value;
                            element.dist = parseFloat(document.getElementById("dist" + i).value);
                            ethVendorList.push(element);
                          }
                        }
                        else if(checkLength2 == 0 && checkLength1 > 0)
                        {
                          var forLength = checkLength1;
  
                          for(var i = 0; i < forLength; i++)
                          {
                            var element = {vendor: "", dist: ""};
                            element.vendor = document.getElementById("vend" + i).value;
                            element.dist = parseFloat(document.getElementById("dist" + i).value);
                            ethVendorList.push(element);
                          }
                        }
                        else
                        {
                          document.getElementById("errorEthernet").value = "Must choose to either inherit ethernet vendors or select at least one";
                          document.getElementById("errorEthernet").innerHTML = "Must choose to either inherit ethernet vendors or select at least one";
                          return;
                        }

                        pfile.oldName = "#{oldName}";
                        pfile.parentProfile = dojo.byId("parentName").value;
                        pfile.name = dojo.byId("name").value;

                        switch (dojo.byId("tcpAction").selectedIndex) {
                        case 0: pfile.tcpAction = "reset"; break;
                        case 1: pfile.tcpAction = "block"; break;
                        case 2: pfile.tcpAction = "open"; break;

                        }
                        switch (dojo.byId("udpAction").selectedIndex) {
                        case 0: pfile.udpAction = "reset"; break;
                        case 1: pfile.udpAction = "block"; break;
                        case 2: pfile.udpAction = "open"; break;
                        }

                        switch (dojo.byId("icmpAction").selectedIndex) {
                        case 0: pfile.icmpAction = "block"; break;
                        case 1: pfile.icmpAction = "open"; break;
                        }


                        pfile.personality = dojo.byId("personality").value;
                        pfile.ethernet = dojo.byId("ethernet").value;
                        pfile.dropRate = dojo.byId("dropRate").value;
                        pfile.uptimeMin = dojo.byId("uptimeMin").value;

                        if (dojo.byId("uptimeType").selectedIndex == 0) {
                        pfile.uptimeMin = dojo.byId("uptimeMin").value;
                        } else {
                        pfile.uptimeMin = dojo.byId("uptimeMin").value;
                        }


                        pfile.isPersonalityInherited = dojo.byId("inheritPersonality").checked;
                        pfile.isEthernetInherited = dojo.byId("inheritEthernet").checked;
                        pfile.isDropRateInherited = dojo.byId("inheritDropRate").checked;
                        pfile.isUptimeInherited = dojo.byId("inheritUptime").checked;
                        pfile.isTcpActionInherited = dojo.byId("inheritTcpAction").checked;
                        pfile.isUdpActionInherited = dojo.byId("inheritUdpAction").checked;
                        pfile.isIcmpActionInherited = dojo.byId("inheritIcmpAction").checked;

                        ports.size = portIndexes.length;
                        for (var i = 0; i < portIndexes.length; i++) 
                        {
                                ports[i] = new obj();
                                ports[i].portNum = dojo.byId("portNum" + portIndexes[i]).value;

                                switch (Number(dojo.byId("portBehavior" + portIndexes[i]).value)) 
                                {
                                        case 0: ports[i].behavior = "reset"; break; 
                                        case 1: ports[i].behavior = "block"; break;
                                        case 2: ports[i].behavior = "open"; break;
                                        case 3: ports[i].behavior = "script"; break;
                                }

                                ports[i].type = dojo.byId("portType" + portIndexes[i]).value;
                                ports[i].script = dojo.byId("portScriptDrop" + portIndexes[i]).value;
                                ports[i].isInherited = dojo.byId("portInherited" + portIndexes[i]).checked;
                        }

                        pfile.distribution = dojo.byId("profDist").value;
                        pfile.generated = dojo.byId("generated").value;

                        //need conditional here for add vs. edit, false == edit, true == add
                        now.SaveProfile(pfile, ports, savedChanges, ethVendorList, newProfile);
                }

                savedChanges = function(err) 
                {
                    if (err == null)
                    {
                        window.location="configHoneydProfiles";
                    } else {
                        alert("Unable to save profile: " + err);
                    }
                }

                addPort = function(port) 
                {
                        if (port == undefined) 
                        {
                                port = function() {};
                                port.portNum = 0;
                                port.type = "TCP";
                                port.behavior = "open";
                                port.isInherited = false;
                                port.scriptName = "NA";
                        }

                        var portDiv = dojo.byId("portTable");
                        var portUID;

                        if (portIndexes.length > 0) 
                        {
                                portUID = portIndexes[portIndexes.length - 1] + 1;
                        }
                        else
                        {
                                portUID = 0;
                        }

                        portIndexes.push(portUID);

                        //var row = "<tr id='portRow" + portUID + "'>";
                        var row = document.createElement("tr");
                        row.id = "portRow" + portUID;


                        if (!port.isInherited)
                        {
                                //row += "<td><input disabled='true' type='checkbox' id='portInherited" + portUID + "'> Inherited? </td>";
                                var boxContainer = document.createElement("td");
                                boxContainer.innerHTML = 'Inherited?';
                                var boxInput = document.createElement("input");
                                boxInput.type = 'checkbox';
                                boxInput.id = 'portInherited' + portUID;
                                boxInput.disabled = true;
                                boxContainer.appendChild(boxInput);
                                row.appendChild(boxContainer);
                                
                                //row += "<td><input id='portNum" + portUID + "' type='number' min=1 max=65535 value=" + port.portNum + "> </td>";
                                var numContainer = document.createElement("td");
                                var numInput = document.createElement("input");
                                numInput.type = 'number';
                                numInput.id = 'portNum' + portUID;
                                numInput.min = 1;
                                numInput.max = 65535;
                                numInput.value = port.portNum;
                                numContainer.appendChild(numInput);
                                row.appendChild(numContainer);
                                
                                //row += "<td><select id ='portType";
                                var typeContainer = document.createElement("td");
                                var typeSelect = document.createElement("select");
                                typeSelect.id = 'portType' + portUID;
                                
                                options = ["UDP", "TCP"];
                                for(j = 0; j < options.length; j++)
                                {
                                  if(port.type == options[j])
                                  {
                                    var option = document.createElement("option");
                                    option.value = j;
                                    option.selected = true;
                                    option.innerHTML = options[j];
                                    typeSelect.appendChild(option);
                                  }
                                  else
                                  {
                                    var option = document.createElement("option");
                                    option.value = j;
                                    option.innerHTML = options[j];
                                    typeSelect.appendChild(option);
                                  }
                                }
                                
                                typeContainer.appendChild(typeSelect);
                                row.appendChild(typeContainer);
                        } 
                        else 
                        {
                                //row += "<td><input type='checkbox' id='portInherited" + portUID + "' onchange='portInheritedChange(" + portUID + ")' CHECKED> Inherited? </td>";
                                var boxContainer = document.createElement("td");
                                boxContainer.innerHTML = 'Inherited?';
                                var boxInput = document.createElement("input");
                                boxInput.type = 'checkbox';
                                boxInput.id = 'portInherited' + portUID;
                                boxInput.setAttribute('onchange', 'portInheritedChange(' + portUID + ')'); 
                                boxInput.checked = true;
                                boxContainer.appendChild(boxInput);
                                row.appendChild(boxContainer);
                                
                                //row += "<td><input id='portNum" + portUID + "' type='number' disabled='true' min=1 max=65535 value=" + port.portNum + "> </td>";
                                var numContainer = document.createElement("td");
                                var numInput = document.createElement("input");
                                numInput.type = 'number';
                                numInput.id = 'portNum' + portUID;
                                numInput.disabled = true;
                                numInput.min = 1;
                                numInput.max = 65535;
                                numInput.value = port.portNum;
                                numContainer.appendChild(numInput);
                                row.appendChild(numContainer);
                                
                                //row += "<td><select disabled='true' id ='portType";
                                var typeContainer = document.createElement("td");
                                var typeSelect = document.createElement("select");
                                typeSelect.id = 'portType' + portUID;
                                typeSelect.disabled = true;
                                
                                options = ["UDP", "TCP"];
                                for(j = 0; j < options.length; j++)
                                {
                                  if(port.type == options[j])
                                  {
                                    var option = document.createElement("option");
                                    option.value = j;
                                    option.selected = true;
                                    option.innerHTML = options[j];
                                    typeSelect.appendChild(option);
                                  }
                                  else
                                  {
                                    var option = document.createElement("option");
                                    option.value = j;
                                    option.innerHTML = options[j];
                                    typeSelect.appendChild(option);
                                  }
                                }
                                
                                typeContainer.appendChild(typeSelect);
                                row.appendChild(typeContainer);
                        }

                        //row += "<td><select onchange='portBehaviorChanged()' id='portBehavior" + portUID + "'>";
                        var behaviorContainer = document.createElement("td");
                        var behaviorSelect = document.createElement("select");
                        behaviorSelect.id = 'portBehavior' + portUID;
                        behaviorSelect.onchange = portBehaviorChanged;
                        
                         
                        options = ["reset", "block", "open", "script"];
                        longOptions = ["Closed: Respond with TCP RST or ICMP Port Error", "Filter: Drop packets and do not respond", "Open: Establish incoming connections", "Script: Emulate a service"];
                        
                        for (j = 0; j < options.length; j++) 
                        {
                                if (port.behavior == options[j]) 
                                {
                                        //row += "<option value='" + j + "' SELECTED>" + longOptions[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.value = j;
                                        option.selected = true;
                                        option.innerHTML = longOptions[j];
                                        behaviorSelect.appendChild(option);
                                } 
                                else 
                                {
                                        //row += "<option value='" + j + "'>" + longOptions[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.value = j;
                                        option.innerHTML = longOptions[j];
                                        behaviorSelect.appendChild(option);
                                }
                        }

                        //row += "</select></td>";
                        behaviorContainer.appendChild(behaviorSelect);
                        row.appendChild(behaviorContainer);



                        var scriptContainer = document.createElement("td");
                        var scriptSelect = document.createElement("select");
                        scriptSelect.id = 'portScriptDrop' + portUID;

                        //row += "<td><select id='portScriptDrop";
                        //row += portUID;
                        //row += "'>"; 
                        var scripts = "#{scripts}";
                        options = scripts.split(",");
                        matchingScriptFound = false;

                        for (j = 0; j < options.length; j++) 
                        {
                                if (port.scriptName == options[j]) 
                                {
                                        //row += "<option SELECTED>" + options[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.selected = true;
                                        option.innerHTML = options[j];
                                        scriptSelect.appendChild(option);
                                        matchingScriptFound = true;
                                } 
                                else 
                                {
                                        //row += "<option>" + options[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.innerHTML = options[j];
                                        scriptSelect.appendChild(option);
                                }
                        }

                        // Have a blank option if no script is selected
                        if (!matchingScriptFound) 
                        {
                                //row += "<option disabled='true' SELECTED>NA</option>";
                                var option = document.createElement("option");
                                option.disabled = true;
                                option.selected = true;
                                option.innerHTML = 'NA';
                                scriptSelect.appendChild(option);
                        } 
                        else 
                        {
                                //row += "<option disabled='true'>NA</option>";
                                var option = document.createElement("option");
                                option.disabled = true;
                                option.innerHTML = 'NA';
                                scriptSelect.appendChild(option);
                        }
                        
                        scriptContainer.appendChild(scriptSelect);
                        row.appendChild(scriptContainer);
                        
                        //row += "</td></select>"; 

                        // Delete button 
                        if (port.isInherited) 
                        {
                                //row += "<td><button type='button' disabled = 'true'/> Inherited </td>";
                                var buttonContainer = document.createElement("td");
                                var inheritedDisabled = document.createElement("button");
                                inheritedDisabled.setAttribute('type','button');
                                inheritedDisabled.disabled = true;
                                inheritedDisabled.innerHTML = 'Inherited';
                                buttonContainer.appendChild(inheritedDisabled);
                                row.appendChild(buttonContainer);
                        } 
                        else 
                        {
                                //row += "<td><button type='button' onClick='deletePort(" + portUID + ")'/> Delete </td>";
                                var buttonContainer = document.createElement("td");
                                var deleteButton = document.createElement("button");
                                deleteButton.setAttribute('type', 'button');
                                deleteButton.setAttribute('onclick', 'deletePort(' + portUID + ')');
                                deleteButton.innerHTML = 'Delete';
                                buttonContainer.appendChild(deleteButton);
                                row.appendChild(buttonContainer);
                        }

                        //row += "</tr>";

                        dojo.byId("portTable").appendChild(row);

                        portBehaviorChanged();
                        portInheritedChange(portUID);
                }

                        // Disable editing if inherited
                portInheritedChange = function(portUID) {
                        if (dojo.byId("portInherited" + portUID).checked) 
                        {
                                dojo.byId("portBehavior" + portUID).disabled = true;
                                dojo.byId("portScriptDrop" + portUID).disabled = true;

                                var behavior = portList[Number(dojo.byId("portNum" + portUID).value)].behavior;

                                selectItemByValue(dojo.byId("portScriptDrop" + portUID), "NA");

                                if (behavior == "reset") 
                                {
                                        dojo.byId("portBehavior" + portUID).value = 0;
                                } 
                                else if (behavior == "block") 
                                {
                                        dojo.byId("portBehavior" + portUID).value = 1;
                                }       
                                else if (behavior == "open") 
                                {
                                        dojo.byId("portBehavior" + portUID).value = 2;
                                } 
                                else if (behavior == "script") 
                                {
                                        dojo.byId("portBehavior" + portUID).value = 3;
                                        selectItemByValue(dojo.byId("portScriptDrop" + portUID), portList[Number(dojo.byId("portNum" + portUID).value)].scriptName);
                                }


                        } 
                        else 
                        {
                                dojo.byId("portBehavior" + portUID).disabled = false;
                                portBehaviorChanged(); 
                        }
                }

                uptimeTypeChanged = function() 
                {
                        if (dojo.byId("uptimeType").selectedIndex == 0) 
                        {
                                dojo.byId("uptimeMax").style.display = "none";
                                document.getElementById("uptimeLabel").innerHTML = "Uptime";
                        } 
                        else 
                        {
                                dojo.byId("uptimeMax").style.display = "block"; 
                                document.getElementById("uptimeLabel").innerHTML = "Uptime Range";
                        }
                }

                portBehaviorChanged = function()
                {
                        for (var i = 0; i < portIndexes.length; i++) 
                        {
                                if (dojo.byId("portBehavior" + portIndexes[i]).value == "3") 
                                {
                                        if (!dojo.byId("portInherited" + portIndexes[i]).checked) 
                                        {
                                                dojo.byId("portScriptDrop" + portIndexes[i]).disabled = false;
                                        }
                                } 
                                else 
                                {
                                        dojo.byId("portScriptDrop" + portIndexes[i]).disabled = true;
                                }
                        }
                }

                deletePort = function(portUID) 
                {
                        var row = dojo.byId("portRow" + portUID);
                        row.parentNode.removeChild(row);
                        var idx = portIndexes.indexOf(portUID);
                        if (idx != -1) 
                        {
                                portIndexes.splice(idx, 1);
                        }
                }

                clearCreated = function() 
                {
                        var numToDelete = numCreated;

                        if(numToDelete >= 1)
                        {
                                var labelDist = document.getElementById("labelDist");
                                var ranges = document.getElementById("ranges");
                                var deleteButtons = document.getElementById("deleteButtonHere");

                                for(var i = 0; i < numToDelete; i++)
                                {
                                        labelDist.removeChild(document.getElementById("ethDiv" + i));
                                        ranges.removeChild(document.getElementById("rangeDiv" + i));

                                        if(deleteButtons.childNodes.length > 1)
                                        {
                                                deleteButtons.removeChild(document.getElementById("deleteDiv" + i));
                                        }
                                }
                        }

                        numCreated = 0;
                }

                inheritanceChanged = function() 
                {
                        if (dojo.byId("personality").disabled = dojo.byId("inheritPersonality").checked) 
                        {
                                dojo.byId("personality").value = profile.personality;
                                dijit.byId("personality").setDisabled(true);
                        } 
                        else
                        {
                                dijit.byId("personality").setDisabled(false);
                        }

                        if(dojo.byId("inheritEthernet").checked) 
                        {
                                dijit.byId("ethernet").setDisabled(true);
                                dojo.byId("ethSelectButton").disabled = true;
                                clearCreated();
                                numCreated = 0;

                                try
                                {
                                        var deletes = document.getElementById("row3").childNodes;

                                        for(var i in deletes)
                                        {
                                                if(deletes[i].tagName == "TD" && deletes[i].getAttribute("id") == "deleteButtonHere")
                                                {
                                                        var forLength = deletes[i].childNodes.length;
                                                        for(var j = 0; j < forLength; j++)
                                                        {                     
                                                                deletes[i].removeChild(deletes[i].childNodes[0]);
                                                        }
                                                }
                                        }
                                }
                                catch(err)
                                {
                                        // This'll catch much the same as the nested try catch;
                                        // there's some stuff inside a tag that getAttribute() 
                                        // can't be called on (Object#<Comment>) but it's 
                                        // easier to just let the error happen than develop logic
                                        // to avoid those elements. I'll try experimenting with using
                                        // tagName stuff a little bit but this'll be how it is for now.
                                }

                                now.GetInheritedEthernetList(document.getElementById("parentName").value, 
                                function(elements, distributions)
                                {
                                        if (elements == null || distributions == null) 
                                        {
                                                alert("Unable to get the ethernet list. Is this profile name invalid?");
                                                window.location = "configHoneydProfiles";
                                                return;
                                        }

                                        var oldEthVendLength = ethVendorLength

                                        console.log("oldEthVendLength " + oldEthVendLength);

                                        if((oldEthVendLength === 0) || (oldEthVendLength != elements.length))
                                        {
                                                ethVendorLength = elements.length;

                                                document.getElementById("errorEthernet").value = "";
                                                document.getElementById("errorEthernet").innerHTML = "";

                                                var teed = document.getElementById("labelDist");
                                                var teed2 = document.getElementById("ranges");
                                                var teed3 = document.getElementById("deleteButtonHere");

                                                var teedFor = teed.childNodes.length;
                                                var teed2For = teed2.childNodes.length;
                                                var teed3For = teed3.childNodes.length;

                                                clearCreated();

                                                for(var i in elements)
                                                {
                                                        var distro = distributions[i];

                                                        if(Math.floor(distro + 0.5) == Math.floor(distro))
                                                        {
                                                                distributions[i] = Math.ceil(distro);
                                                                distributions[i + 1] += distro % 1; 
                                                        }
                                                        else
                                                        {
                                                                distributions[i] = Math.floor(distro);
                                                                distributions[i + 1] -= distro % 1; 
                                                        }

                                                        var div = document.createElement("div");

                                                        div.setAttribute("id", "ethDiv" + i);
                                                        div.setAttribute("style", "width: content_width");

                                                        var rangeDiv = document.createElement("div");

                                                        rangeDiv.setAttribute("id", "rangeDiv" + i);
                                                        rangeDiv.setAttribute("style", "width: content_width");

                                                        var add = document.createElement("input");

                                                        add.setAttribute("id", "vend" + i);
                                                        add.innerHTML = elements[i];
                                                        add.setAttribute("type", "text");
                                                        add.setAttribute("value", elements[i]);
                                                        add.setAttribute("style", "width: 10");
                                                        add.setAttribute("readonly", "true");
                                                        add.setAttribute("style", "display: inline-block; float: left; clear: left");

                                                        var br = document.createElement("br");

                                                        var distLabel = document.createElement("input");

                                                        distLabel.setAttribute("id","distLabel" + i);
                                                        distLabel.setAttribute("value", distributions[i] + "%");
                                                        distLabel.innerHTML = distributions[i] + "%";
                                                        distLabel.setAttribute("type", "text");
                                                        distLabel.setAttribute("style","width: 40px; float: right; clear: right");
                                                        distLabel.setAttribute("readonly", true);
                                                        distLabel.setAttribute("onchange", 'clearCell("distLabel' + i + '", ' + elements.length + ')');

                                                        var distribution = document.createElement("input");

                                                        distribution.setAttribute("id", "dist" + i);
                                                        distribution.setAttribute("type", "range");
                                                        distribution.setAttribute("min", "1");                    
                                                        distribution.setAttribute("max", 100 - elements.length);
                                                        distribution.setAttribute("step", "1");
                                                        distribution.setAttribute("value", distributions[i]);
                                                        distribution.setAttribute("style", "vertical-align: text");
                                                        distribution.setAttribute("readonly", true);
                                                        distribution.setAttribute("onchange", 'sliderMoved("dist' + i + '", ' + elements.length + ')');

                                                        div.appendChild(add);
                                                        div.appendChild(distLabel);
                                                        teed.appendChild(div);
                                                        rangeDiv.appendChild(distribution);
                                                        rangeDiv.appendChild(br);
                                                        teed2.appendChild(rangeDiv);

                                                        if(ethVendorLength == 1)
                                                        {
                                                                document.getElementById("dist0").value = 100;
                                                                document.getElementById("dist0").max = 100;
                                                                document.getElementById("distLabel0").value = "100%";
                                                                document.getElementById("distLabel0").innerHTML = "100%";
                                                                document.getElementById("distLabel0").setAttribute("readonly","true");
                                                                document.getElementById("dist0").setAttribute("readonly", "true");
                                                        }
                                                }    
                                        }
                                });     
                        }
                        else 
                        {
                                dojo.byId("ethSelectButton").disabled = false;
                                dijit.byId("ethernet").setDisabled(false);

                                ethVendorLength = 0;

                                var deletes = document.getElementById("row3").childNodes;

                                try
                                {
                                        for(var i in deletes)
                                        {
                                                if(deletes[i].tagName == "TD" && deletes[i].getAttribute("id") == "labelDist")
                                                {
                                                        var forLength = deletes[i].childNodes.length;
                                                        for(var j = 0; j < forLength; j++)
                                                        {
                                                                deletes[i].removeChild(deletes[i].childNodes[0]);
                                                        }
                                                }
                                                else if(deletes[i].tagName == "TD" && deletes[i].getAttribute("id") == "ranges")
                                                {
                                                        var forLength = deletes[i].childNodes.length;
                                                        for(var j = 0; j < forLength; j++)
                                                        {                     
                                                                deletes[i].removeChild(deletes[i].childNodes[0]);
                                                        }
                                                }
                                                else if(deletes[i].tagName == "TD" && deletes[i].getAttribute("id") == "deleteButtonHere")
                                                {
                                                        var forLength = deletes[i].childNodes.length;
                                                        for(var j = 0; j < forLength; j++)
                                                        {                     
                                                                deletes[i].removeChild(deletes[i].childNodes[0]);
                                                        }
                                                }
                                        }
                                }
                                catch(err)
                                {
                                        // This'll catch much the same as the nested try catch;
                                        // there's some stuff inside a tag that getAttribute() 
                                        // can't be called on (Object#<Comment>) but it's 
                                        // easier to just let the error happen than develop logic
                                        // to avoid those elements. I'll try experimenting with using
                                        // tagName stuff a little bit but this'll be how it is for now.
                                }
                                if(newProfile == "false" && document.getElementById("dist0") == undefined)
                                {
                                        now.GetVendors(document.getElementById("name").value, function(elements, distributions)
                                        {
                                                if (elements == null || distributions == null) 
                                                {
                                                        alert("Unable to get the ethernet list. Is this profile name invalid?");
                                                        window.location = "configHoneydProfiles";
                                                        return;
                                                }

                                                numCreated = elements.length;

                                                document.getElementById("errorEthernet").value = "";
                                                document.getElementById("errorEthernet").innerHTML = "";

                                                var teed = document.getElementById("labelDist");
                                                var teed2 = document.getElementById("ranges");
                                                var teed3 = document.getElementById("deleteButtonHere");

                                                var teedFor = teed.childNodes.length;
                                                var teed2For = teed2.childNodes.length;
                                                var teed3For = teed3.childNodes.length;

                                                for(var i in elements)
                                                {
                                                        var distro = distributions[i];

                                                        if(Math.floor(distro + 0.5) == Math.floor(distro))
                                                        {
                                                                distributions[i] = Math.ceil(distro);
                                                                distributions[i + 1] += distro % 1; 
                                                        }
                                                        else
                                                        {
                                                                distributions[i] = Math.floor(distro);
                                                                distributions[i + 1] -= distro % 1; 
                                                        }

                                                        var div = document.createElement("div");

                                                        div.setAttribute("id", "ethDiv" + i);
                                                        div.setAttribute("style", "width: content_width");

                                                        var rangeDiv = document.createElement("div");

                                                        rangeDiv.setAttribute("id", "rangeDiv" + i);
                                                        rangeDiv.setAttribute("style", "width: content_width");

                                                        var add = document.createElement("input");

                                                        add.setAttribute("id", "vend" + i);
                                                        add.innerHTML = elements[i];
                                                        add.setAttribute("type", "text");
                                                        add.setAttribute("value", elements[i]);
                                                        add.setAttribute("style", "width: 10");
                                                        add.setAttribute("readonly", "true");
                                                        add.setAttribute("style", "display: inline-block; float: left; clear: left");

                                                        var br = document.createElement("br");

                                                        var distLabel = document.createElement("input");

                                                        distLabel.setAttribute("id","distLabel" + i);
                                                        distLabel.setAttribute("value", distributions[i] + "%");
                                                        distLabel.innerHTML = distributions[i] + "%";
                                                        distLabel.setAttribute("type", "text");
                                                        distLabel.setAttribute("readonly", "true");
                                                        distLabel.setAttribute("style","width: 40px; float: right; clear: right");
                                                        distLabel.setAttribute("onchange", 'clearCell("distLabel' + i + '", ' + elements.length + ')');

                                                        var distribution = document.createElement("input");

                                                        distribution.setAttribute("id", "dist" + i);
                                                        distribution.setAttribute("type", "range");
                                                        distribution.setAttribute("min", "1");

                                                        if(elements.length > 1)
                                                        {         
                                                                distribution.setAttribute("max", 100 - elements.length);
                                                        }
                                                        else if(elements.length == 1)
                                                        {
                                                                distribution.setAttribute("max", "100");
                                                        }

                                                        distribution.setAttribute("step", "1");
                                                        distribution.setAttribute("value", distributions[i]);
                                                        distribution.setAttribute("readonly", "true");
                                                        distribution.setAttribute("style", "vertical-align: text");
                                                        distribution.setAttribute("onchange", 'sliderMoved("dist' + i + '", ' + elements.length + ')');

                                                        var deleteDiv = document.createElement("div");

                                                        deleteDiv.setAttribute("style", "width: content_width");
                                                        deleteDiv.setAttribute("id", "deleteDiv" + i);

                                                        var deleteButton = document.createElement("button");

                                                        deleteButton.setAttribute("id", "delete" + i);
                                                        deleteButton.setAttribute("type", "button");
                                                        deleteButton.setAttribute("onclick", 'deleteAndClean("ethDiv' + i + '")');
                                                        deleteButton.innerHTML = "Delete Vendor";

                                                        div.appendChild(add);
                                                        div.appendChild(distLabel);
                                                        teed.appendChild(div);
                                                        rangeDiv.appendChild(distribution);
                                                        rangeDiv.appendChild(br);
                                                        teed2.appendChild(rangeDiv);
                                                        deleteDiv.appendChild(deleteButton);
                                                        teed3.appendChild(deleteDiv);
                                                }

                                                if(numCreated == 1)
                                                {
                                                        document.getElementById("dist0").value = 100;
                                                        document.getElementById("dist0").max = 100;
                                                        document.getElementById("distLabel0").value = "100%";
                                                        document.getElementById("distLabel0").innerHTML = "100%";
                                                        document.getElementById("distLabel0").setAttribute("readonly","true");
                                                        document.getElementById("dist0").setAttribute("readonly", "true");
                                                }
                                        });
                                }
                        }

                        if (dojo.byId("dropRate").disabled = dojo.byId("inheritDropRate").checked) 
                        {
                                dojo.byId("dropRate").value = profile.dropRate;
                        }

                        if (dojo.byId("uptimeMin").disabled = dojo.byId("inheritUptime").checked) 
                        {
                                dojo.byId("uptimeMin").value = profile.uptimeMin;
                        }

                        if (dojo.byId("uptimeMax").disabled = dojo.byId("inheritUptime").checked) 
                        {
                                dojo.byId("uptimeMax").value = profile.uptimeMax;
                        }

                        if (dojo.byId("uptimeType").disabled = dojo.byId("inheritUptime").checked) 
                        {
                                if (profile.uptimeMin == profile.uptimeMax) 
                                {
                                        dojo.byId("uptimeType").selectedIndex = 0;
                                } 
                                else 
                                {
                                        dojo.byId("uptimeType").selectedIndex = 1; 
                                }
                        }

                        if (dojo.byId("tcpAction").disabled = dojo.byId("inheritTcpAction").checked) 
                        {
                                if (profile.tcpAction == "reset") 
                                {
                                        dojo.byId("tcpAction").selectedIndex = 0;
                                } 
                                else if (profile.tcpAction == "block") 
                                {
                                        dojo.byId("tcpAction").selectedIndex = 1;
                                } 
                                else if (profile.tcpAction == "open") 
                                {
                                        dojo.byId("tcpAction").selectedIndex = 2;
                                }
                        }

                        if (dojo.byId("udpAction").disabled = dojo.byId("inheritUdpAction").checked) 
                        {
                                if (profile.udpAction == "reset") 
                                {
                                        dojo.byId("udpAction").selectedIndex = 0;
                                } 
                                else if (profile.udpAction == "block") 
                                {
                                        dojo.byId("udpAction").selectedIndex = 1;
                                } 
                                else if (profile.udpAction == "open") 
                                {
                                        dojo.byId("udpAction").selectedIndex = 2;
                                }
                        }

                        if (dojo.byId("icmpAction").disabled = dojo.byId("inheritIcmpAction").checked) 
                        {
                                if (profile.icmpAction == "block") 
                                {
                                        dojo.byId("icmpAction").selectedIndex = 0;
                                } 
                                else if (profile.icmpAction == "open") 
                                {
                                        dojo.byId("icmpAction").selectedIndex = 1;
                                }
                        }


                        uptimeTypeChanged();
                }

                now.ready(function() {
                        if (loaded) 
                        {
                                return;
                        } 
                        else 
                        {
                                loaded = true;
                        }

                        now.GetProfile(currentName, function(pfile)
                        {
                                if (pfile == undefined)
                                {
                                        alert("ERROR: Unable to fetch the requested profile information.");
                                        window.location="configHoneydProfiles";
                                        return;
                                }
                                else
                                {
                                        //console.log(pfile);
                                }

                                profile = pfile;

                                console.log("generated == " + profile.generated);

                                dojo.byId("generated").value = profile.generated;

                                if (newProfile == "true") 
                                {
                                        dojo.byId("name").value = "New Profile";
                                        dojo.byId("parentName").value = "#{parentName}";
                                        dojo.byId("inheritPersonality").checked = true;
                                        dojo.byId("inheritEthernet").checked = true; 
                                        dojo.byId("inheritDropRate").checked = true; 
                                        dojo.byId("inheritUptime").checked = true; 
                                        dojo.byId("inheritTcpAction").checked = true; 
                                        dojo.byId("inheritUdpAction").checked = true; 
                                        dojo.byId("inheritIcmpAction").checked = true;
                                        dojo.byId("profDist").value = "10";
                                } 
                                else 
                                {
                                        dojo.byId("name").value = profile.name;
                                        if(profile.name == "default")
                                        {
                                          dojo.byId("name").setAttribute('readonly', true);
                                          var hide = dojo.byId("row1").childNodes;
                                          var forLength = hide.length;
                                          for(var j = 0; j < forLength - 1; j++)
                                          {
                                            var secondSet = hide[j].childNodes;
                                            if(secondSet.childNodes == undefined || secondSet.childNodes[0].tagName != "INPUT")
                                            {
                                              console.log("Deleting found " + hide[j].tagName + " with " + secondSet.childNodes + " childNodes");
                                              dojo.byId("row1").removeChild(hide[j]);
                                            }
                                            forLength = hide.length;
                                            j--;
                                          }
                                          dojo.byId("parentName").value = "";
                                          dojo.byId("parentName").setAttribute('type', 'hidden');
                                        }
                                        else
                                        {
                                          dojo.byId("parentName").value = profile.parentProfile;
                                        }
                                        dojo.byId("inheritPersonality").checked = profile.isPersonalityInherited;
                                        dojo.byId("inheritEthernet").checked = profile.isEthernetInherited;
                                        dojo.byId("inheritDropRate").checked = profile.isDropRateInherited;
                                        dojo.byId("inheritUptime").checked = profile.isUptimeInherited;
                                        dojo.byId("inheritTcpAction").checked = profile.isTcpActionInherited;
                                        dojo.byId("inheritUdpAction").checked = profile.isUdpActionInherited;
                                        dojo.byId("inheritIcmpAction").checked = profile.isIcmpActionInherited;
                                        dojo.byId("profDist").value = profile.distribution;
                                }


                                if (profile.tcpAction == "reset") 
                                {
                                        dojo.byId("tcpAction").selectedIndex = 0;
                                } 
                                else if (profile.tcpAction == "block")  
                                {
                                        dojo.byId("tcpAction").selectedIndex = 1;
                                } 
                                else if (profile.tcpAction == "open") 
                                {
                                        dojo.byId("tcpAction").selectedIndex = 2;
                                }

                                if (profile.udpAction == "reset") 
                                {
                                        dojo.byId("udpAction").selectedIndex = 0;
                                } 
                                else if (profile.udpAction == "block") 
                                {
                                        dojo.byId("udpAction").selectedIndex = 1;
                                } 
                                else if (profile.udpAction == "open") 
                                {
                                        dojo.byId("udpAction").selectedIndex = 2;
                                }

                                if (profile.icmpAction == "block") 
                                {
                                        dojo.byId("icmpAction").selectedIndex = 0;
                                } 
                                else if (profile.icmpAction == "open") 
                                {
                                        dojo.byId("icmpAction").selectedIndex = 1;
                                }

                                dojo.byId("personality").value = profile.personality;
                                dojo.byId("uptimeMin").value = profile.uptimeMin;
                                dojo.byId("uptimeMax").value = profile.uptimeMax;
                                dojo.byId("dropRate").value = profile.dropRate;

                                inheritanceChanged();
                        });
                        
                        now.GetPorts(currentName, function(ports) 
                        {
                                if(currentName != "default" && ports[0].portNum == "0")
                                {
                                  return;
                                }
                                
                                for (var i = 0; i < ports.length; i++) 
                                {
                                        portList[ports[i].portNum] = ports[i];
                                        //ports[i].isInherited = true;
                                        addPort(ports[i]);
                                }
                                portBehaviorChanged();
                        });
                });
        });


