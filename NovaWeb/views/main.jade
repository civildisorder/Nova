extends layout

block topPannelAdditions
  div(style="float: left") Novad Status:&nbsp 
  div#nova_status unknown
  div(style="float: left") Haystack Status:&nbsp  
  div#haystack_status unknown

block buttonPannelAdditions
  button(data-dojo-type="dijit.form.Button", type="button") Start Nova
    script(type="dojo/method", data-dojo-event="onClick") now.StartNovad();
  br 
  
  button(data-dojo-type="dijit.form.Button",type="button") Stop Nova
    script(type="dojo/method", data-dojo-event="onClick") now.StopNovad();
  br
  
  br

  button(data-dojo-type="dijit.form.Button",type="button") Start Haystack
    script(type="dojo/method", data-dojo-event="onClick") now.StartHaystack();
  br

  button(data-dojo-type="dijit.form.Button",type="button") Stop Haystack
    script(type="dojo/method", data-dojo-event="onClick") now.StopHaystack();
  br

  br
  button(data-dojo-type="dijit.form.Button",type="button") Clear All Suspects
    script(type="dojo/method", data-dojo-event="onClick") now.ClearAllSuspects();suspectGrid.store.fetch({onComplete: clearSuspects});
  br
  

block content
  div#nova_suspects_header
    h1 Suspect List
    button#liveUpdateButton(data-dojo-type="dijit.form.Button",type="button") Pause Updates/Auto Scrolling
      script(type="dojo/method", data-dojo-event="onClick", data-dojo-args="evt")
        | liveUpdate = !liveUpdate;
        | if (!liveUpdate) {dojo.byId("liveUpdateButton").innerHTML = "Unpause updates/Auto Scrolling";}
        | else {dojo.byId("liveUpdateButton").innerHTML = "Pause updates/Auto Scrolling";}
    br
    br
    
    label Filter by IP (supports * and ?)
    input#ipFilter(type="text", name="ipFilter", value="*", data-dojo-type="dijit.form.TextBox", intermediateChanges=true, onchange="ipFilterChange()")
        
    br
  div#nova_suspects
  div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: none")
   h4 Novad is not currently connected or running. Try starting it.
   
block headerAdditions
  script 
    var suspectStore;
    var suspectGrid;
    var liveUpdate = true;

    require(["dijit/form/TextBox"]);

    function ipFilterChange() {
      var filter = dijit.byId("ipFilter").value;
      dijit.byId("nova_suspects").filter({GetInAddr: filter});
    }
    

    now.updateNovadStatus = function (isNovadUp){
      dojo.byId("nova_status").innerHTML = isNovadUp ? "Up" : "Down";
      dojo.byId("nova_suspects_header").style.display = isNovadUp ? "block" : "none";
      dojo.byId("nova_suspects").style.display = isNovadUp ? "block" : "none";
      dojo.byId("nova_suspects_error_view").style.display = isNovadUp ? "none" : "block";
    };

    now.updateHaystackStatus = function (isHaystackUp){
      dojo.byId("haystack_status").innerHTML = isHaystackUp ? "Up" : "Down";
    };

    now.AllSuspectsCleared = function() {
      suspectGrid.store.fetch({onComplete: clearSuspects});
    }

    now.OnNewSuspect = function(suspect){
       if(!liveUpdate) {
         return;
       }
      // This is probably a really bad way to do this...
      for (var i in suspect.GetFeatures) {  
        suspect[i] = suspect.GetFeatures[i];
      }
      if( suspectStore.get(suspect.GetInAddr) ) {       
        suspectStore.put(suspect,{id: suspect.GetInAddr, overwrite: true});
        suspectGrid.render();
      } else {
        suspectStore.add(suspect,{id: suspect.GetInAddr}); 
      }
    };

    var clearSuspects = function(items, request){
      dojo.forEach(items, function(i) {
        console.log("Deleted item " + i.GetInAddr);
        suspectGrid.store.deleteItem(i);
        suspectStore.remove(i.GetInAddr);
      });
    };


    require(["dojo/ready","dojo/store/Memory", "dojo/store/Observable", "dojo/data/ObjectStore"], function(ready){ready(function(){ 
    dojo.addOnLoad(function(){
      suspectStore = new dojo.store.Memory();
      suspectStore.idProperty="GetInAddr";
      // Formatter for the classification
      function classificationFormatter(d) {
        
        var bar = new dijit.ProgressBar({progress:d, maximum:1}, "bar");
        return bar;
        //var num = new Number(d);
        //return (num.toFixed(6));
      }

      // Formatter for the floating point features
      function featureFormatter(d) {
        var num = new Number(d);
        return (num.toFixed(2));
      }
    
    require(["dojox/grid/DataGrid","dojo/data/ObjectStore","dojo/domReady!"],
    function(DataGrid,ObjectStore){
    suspectGrid = new DataGrid(
    {
      store: dataStore = dojo.data.ObjectStore({objectStore: suspectStore}),
      sortInfo: -2,
      autoWidth: true,
      structure: [ 
        {name:"Address", field:"GetInAddr", width:"150px"}, 
        {name:"Classification", field:"GetClassification", width:"300px", formatter: classificationFormatter},
        {name:"Hostile", field:"GetIsHostile"},
        {name:"IP traffic distribution", width:"125px", field:"ip_traffic_distribution", formatter: featureFormatter},
        {name:"Port traffic distribution", width:"125px", field:"port_traffic_distribution", formatter: featureFormatter},
        {name:"Haystack event frequency", width:"150px", field:"haystack_event_frequency", formatter: featureFormatter},
        {name:"Packet Size Mean", field:"packet_size_mean", formatter: featureFormatter},
        {name:"Packet Size Deviation", field:"packet_size_deviation", formatter: featureFormatter},
        {name:"IPs Contacted", field:"distinct_ips"},
        {name:"Ports Contacted", field:"distinct_ports"},
        {name:"Packet Interval Mean", field:"packet_interval_mean", formatter: featureFormatter},
        {name:"Packet Interval Deviation", field:"packet_interval_deviation", formatter: featureFormatter},
      ],
    }, 
    "nova_suspects"
    );
    suspectGrid.startup();
    now.sendAllSuspects(now.OnNewSuspect);
    });
    });

    }); });

