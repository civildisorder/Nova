script
  function updateEnabledFeaturesString(whichFeature)
  {
    var enabledMask = document.getElementById("ENABLED_FEATURES").getAttribute("value");
    
    var changeTo = "";
    
    if(document.getElementById("feature" + whichFeature).checked)
    {
      for(var i in enabledMask)
      {
        if(i == whichFeature)
        {
          changeTo += "1";
        }
        else
        {
          changeTo += enabledMask[i];
        }
      }
    }
    else
    {
      for(var i in enabledMask)
      {
        if(i == whichFeature)
        {
          changeTo += "0";
        }
        else
        {
          changeTo += enabledMask[i];
        }
      }
    }
    
    document.getElementById("ENABLED_FEATURES").setAttribute("value", changeTo);
    document.getElementById("enabledFeaturesLabel").innerHTML = "Features Mask: " + changeTo;
  }

  function featureWeightChanged() {
    var enabledMask = document.getElementById("ENABLED_FEATURES").getAttribute("value");
    var weights = "";
    for(var i in enabledMask) {
        weights += String(document.getElementById("featureWeight" + i).value) + " ";
    }
    weights = weights.slice(0, -1);
    document.getElementById("FEATURE_WEIGHTS").value = weights; 
  }

  function featureThresholdChanged() {
      var enabledMask = document.getElementById("ENABLED_FEATURES").getAttribute("value");
      var hostileThresholds = "";
      for (var i in enabledMask) {
          hostileThresholds += String(document.getElementById("featureThreshold" + i).value + " ");
      }
      hostileThresholds = hostileThresholds.slice(0, -1);
      document.getElementById("THRESHOLD_HOSTILE_TRIGGERS").value = hostileThresholds;
  }

  function updateFeatureSettingStates() {
    var enabledMask = document.getElementById("ENABLED_FEATURES").getAttribute("value");
    for (var i in enabledMask) {
        if (document.getElementById("CLASSIFICATION_ENGINE").value == "THRESHOLD_TRIGGER") {
            document.getElementById("featureWeight" + i).disabled = true;
            document.getElementById("featureThreshold" + i).disabled = false;
        } else {
            document.getElementById("featureWeight" + i).disabled = false;
            document.getElementById("featureThreshold" + i).disabled = true;
        }
    }
  }

  require(["dojo/domReady!"], function(){
    updateFeatureSettingStates();
  });
  
form(method="post", action="/configureNovaSave")
  h2 General Configuration

  h2 Web Interface

  label Web interface port
  input(type="number", name="WEB_UI_PORT", value=WEB_UI_PORT)
  br

  h2 File Paths
  label Path to state save file
  input(type="text", name="CE_SAVE_FILE",  value=CE_SAVE_FILE)
  br
  
  label Path to training file
  input(type="text", name="DATAFILE",  value=DATAFILE)
  br
   
  label Path to PCAP file
  input(type="text", name="PCAP_FILE",  value=PCAP_FILE)
  br

  label Path to User Honeyd Config
  input(type="text", name="USER_HONEYD_CONFIG",  value=USER_HONEYD_CONFIG)
  br
  
  
  label Path to Haystack Honeyd Config File
  input(type="text", name="HS_HONEYD_CONFIG",  value=HS_HONEYD_CONFIG)
  br

  h2 TCP Timeout
  label TCP Timeout
  input(type="number", step="1", min="0", name="TCP_TIMEOUT",  value=TCP_TIMEOUT)
  br

  label TCP Timeout Check Frequency
  input(type="number", step="1", min="0", name="TCP_CHECK_FREQ",  value=TCP_CHECK_FREQ)
  br

  h2 Special Run Settings
  label Read PCAP file?
  br
  if READ_PCAP != "0"
    |Yes
    input(type="radio", name="READ_PCAP", value="1", checked)
    br
    |No
    input(type="radio", name="READ_PCAP", value="0")
    br
  else
    |Yes
    input(type="radio", name="READ_PCAP", value="1")
    br
    |No
    input(type="radio", name="READ_PCAP", value="0", checked)
    br
  br

  label Go to live capture after PCAP?
  br
  if GO_TO_LIVE != "0"
    |Yes
    input(type="radio", name="GO_TO_LIVE", value="1", checked)
    br
    |No
    input(type="radio", name="GO_TO_LIVE", value="0")
    br
  else
    |Yes
    input(type="radio", name="GO_TO_LIVE", value="1")
    br
    |No
    input(type="radio", name="GO_TO_LIVE", value="0", checked)
    br
  br
  
  label Packet Capture Buffer Size (in bytes)
  input(type="number", step="1", min="1024", name="CAPTURE_BUFFER_SIZE",  value=CAPTURE_BUFFER_SIZE)
  br
  

  h2 Classification Settings
  label Classification Engine
  select#CLASSIFICATION_ENGINE(name="CLASSIFICATION_ENGINE", onchange="updateFeatureSettingStates()")
    - for(var i = 0; i < supportedEngines.length; i++)
      - if (CLASSIFICATION_ENGINE == supportedEngines[i])
        option(value="#{supportedEngines[i]}", selected='selected') #{supportedEngines[i]}
      - else
        option(value="#{supportedEngines[i]}") #{supportedEngines[i]}

  br

  label(style="text-align:center;vertical-align:middle", id="enabledFeaturesLabel", name="ENABLED_FEATURES") Features Mask: #{ENABLED_FEATURES}
  br
  br
  table
    thead
      tr 
        td
          label(style="text-align:center; width: 300px") Feature Name
        td
          label(style="text-align:center; width: 50px") Enabled
        td
          label(style="text-align: center; width:100px") Weight
        td
          label(style="text-align: center; width: 100px") Hostile Threshold
    tbody
      - for(var i = 0; i < FEATURE_NAMES.length; i++)
        tr
          td(style="text-align:center;vertical-align:middle;") 
            #{FEATURE_NAMES[i]}
          - if(ENABLED_FEATURES[i] == 1)
            td
              input(type="checkbox", value="#{i}", id="feature#{i}", checked, onclick="updateEnabledFeaturesString(#{i})", style="width:50px")
          - else
            td
              input(type="checkbox", value="#{i}", id="feature#{i}", onclick="updateEnabledFeaturesString(#{i})", style="width:50px")
           
          td
            input(type="number", min="0", max="1", value="#{FEATURE_WEIGHTS.split(" ")[i]}", id="featureWeight#{i}", onchange="featureWeightChanged()", style="width:100px")
          td
            input(value="#{THRESHOLD_HOSTILE_TRIGGERS.split(" ")[i]}", id="featureThreshold#{i}", onchange="featureThresholdChanged()", style="width: 100px")
  br
  
  input(type="hidden", id="ENABLED_FEATURES", name="ENABLED_FEATURES", value="#{ENABLED_FEATURES}") 
  hidden(id="length", value=FEATURE_NAMES.length)
  
  label(style="text-align:center;vertical-align:middle") Feature Weights
  br
  table
    thead
      tr 
        td
          label(style="text-align:center;vertical-align:middle;font:bold;") Feature Name
        td
          label(style="text-align:center;vertical-align:middle;font:bold;") Weight
    tbody
      - for(var i = 0; i < FEATURE_NAMES.length; i++)
        tr
          td(style="text-align:center;vertical-align:middle;") 
            #{FEATURE_NAMES[i]}
          td
            input(type="number", min="0", max="1", value="#{FEATURE_WEIGHTS.split(" ")[i]}", id="featureWeight#{i}", onchange="featureWeightChanged()")
  br
  
  input(type="hidden", id="FEATURE_WEIGHTS", name="FEATURE_WEIGHTS", value="#{FEATURE_WEIGHTS}") 
  input(type="hidden", id="THRESHOLD_HOSTILE_TRIGGERS", name="THRESHOLD_HOSTILE_TRIGGERS", value="#{THRESHOLD_HOSTILE_TRIGGERS}") 


  
  label Neighbors
  input(type="number", step="1", min="1", name="K",  value=K)
  br
  
  label Classification Timeout
  input(type="number", step="1", min="0", name="CLASSIFICATION_TIMEOUT",  value=CLASSIFICATION_TIMEOUT)
  br

  label EPS
  input(name="EPS",  value=EPS)
  br

  label Classification Threshold
  input(name="CLASSIFICATION_THRESHOLD",  value=CLASSIFICATION_THRESHOLD)
  br

  label Packets Needed Before Classification
  input(type="number", name="MIN_PACKET_THRESHOLD", value=MIN_PACKET_THRESHOLD);
  br

  label Clear data after suspect logged as hostile?
  br
  if CLEAR_AFTER_HOSTILE_EVENT != "0"
    |Yes
    input(type="radio", name="CLEAR_AFTER_HOSTILE_EVENT", value="1", checked)
    br
    |No
    input(type="radio", name="CLEAR_AFTER_HOSTILE_EVENT", value="0")
    br
  else
    |Yes
    input(type="radio", name="CLEAR_AFTER_HOSTILE_EVENT", value="1")
    br
    |No
    input(type="radio", name="CLEAR_AFTER_HOSTILE_EVENT", value="0", checked)
    br
  br

  label Custom PCAP Filter String
  input(type="text", name="CUSTOM_PCAP_FILTER", value=CUSTOM_PCAP_FILTER)
  br
  
  label Custom PCAP Filter String Mode
  br
  if CUSTOM_PCAP_MODE != "0"
    |Override
    input(type="radio", name="CUSTOM_PCAP_MODE", value="1", checked)
    br
    |Append
    input(type="radio", name="CUSTOM_PCAP_MODE", value="0")
    br
  else
    |Override
    input(type="radio", name="CUSTOM_PCAP_MODE", value="1")
    br
    |Append
    input(type="radio", name="CUSTOM_PCAP_MODE", value="0", checked)
    br
  br

  h2 Training Mode Settings

  label Thinning Distance
  input(name="THINNING_DISTANCE",  value=THINNING_DISTANCE)
  br

  h2 Doppelganger
  label Doppelganger IP
  input(name="DOPPELGANGER_IP",  value=DOPPELGANGER_IP)
  br

  label State save frequency
  input(type="number", min="0", name="SAVE_FREQUENCY",  value=SAVE_FREQUENCY)
  br

  label Data TTL
  input(type="number", min="0", name="DATA_TTL",  value=DATA_TTL)
  br

  h2 Logger Settings
  label Service Preferences
  input(name="SERVICE_PREFERENCES", value=SERVICE_PREFERENCES)
  br

  label Haystack Storage
  input(name="HAYSTACK_STORAGE",  value=HAYSTACK_STORAGE)
  br


